Android 图像处理：（可参考：http://blog.csdn.net/yanbober/article/details/50577855）

Paint
    常用方法：
       setAntiAlias();      //设置画笔的锯齿效果
       setDither();         //获取与设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满、图像更加清晰。
       setStrokeJoin()      //获取与设置画笔画线等连接处的轮廓样式，可取值:Join.MITER/Join.ROUND/Join.BEVEL
       setColor();          //设置画笔颜色
       setARGB();           //设置画笔的A、R、G、B值
       setAlpha();          //设置画笔的Alpha值
       setTextSize();       //设置字体的大小
       setStyle();          //设置画笔风格（实心或空心）
       setStrokeWidth();    //设置空心边框的宽度
       setFakeBoldText (boolean fakeBoldText);//设置文本仿粗体。注意设置在小字体上效果会非常差。
       setFilterBitmap(boolean filter); //如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置。
       setLetterSpacing(float letterSpacing);//设置行间距，默认是0.
       setPathEffect(PathEffect effect);//设置绘制路径的效果，如点画线等
       setShadowLayer(float radius, float dx, float dy, int shadowColor);//radius表示阴影的扩散半径；dx和dy表示阴影平面上的偏移值；shadowColor就不说了阴影颜色。
       setStrokeCap(Paint.Cap cap);//该方法用来设置我们画笔的 笔触风格 ，比如：ROUND，表示是圆角的笔触。
                                   //那么什么叫笔触呢，其实很简单，就像我们现实世界中的笔，如果你用圆珠笔在纸上
                                   //戳一点，那么这个点一定是个圆，即便很小，它代表了笔的笔触形状，如果我们把一支
                                   //铅笔笔尖削成方形的，那么画出来的线条会是一条弯曲的“矩形”，这就是笔触的意思。
                                   //除了ROUND，Paint.Cap还提供了另外两种类型：SQUARE和BUTT
       setMaskFilter()    //不支持硬件加速。该方法接收一个MaskFilter类型的参数，MaskFilter有两个子类，分别是BlurMaskFilter和EmbossMaskFilter，可以分别用来绘制模糊阴影以及浮雕效果。
       getTextPath()      //获取文字轮廓的Path值，特别注意Path要close，否则无效
       setShader()      //非常重要的方法，获取与设置渲染方法。Shader的直接子类有BitmapShader位图图像渲染、LinearGradient线性渲染、RadialGradient环形渲染、SweepGradient扫描渐变渲染/梯度渲染、ComposeShader组合渲染
       setXfermode() //非常重要的方法设置两绘制相交时的模式，因为正常的情况下在已有图像上绘图会完全遮挡住下面已有的图，所以setXfermode()方法的作用就是来设置叠加时该如何搞的规则，传递null可以清除任何以前的xfermode设置
---------------------------------------------------------------------------------------------
ColorMatrix  颜色矩阵
    ColorMatrix colorMatrix = new ColorMatrix();
    常用方法：（例：ColorMatrixHelperActivity.java）
        setRotate(int axis, float degree);      //设置色调，axis-系统分别使用0、1、2来代表Red、Green、Blue三种颜色的处理；
                                                          degree-需要处理的值 例如：colorMatrix.setRotate(0, hue0);
        setSaturation(float sat);               //设置饱和度， sat取值范围[0,1]
        setScale(float rScale, float gScale, float bScale, float aScale);   //设置亮度
        postConcat(ColorMatrix postmatrix);     //将矩阵的作用混合

    通过直接设置颜色矩阵值方法：（例：ColorMatrixActivity.java）
        矩阵乘法运算：
        |a b c d e||R|  |aR bG cB dA e|  |R1|
        |f g h i j||G|  |fR gG hB iA j|  |G1|
        |k l m n o||B|= |kR lG mB nA o|= |B1|
        |p q r s t||1|  |pR qG rB sA t|  |A1|
        R1 = aR + bG + cB + dA + e;
        ....
        矩阵第一行abcde值用来决定新的颜色值中的R--红色
        矩阵第二行fghij值用来决定新的颜色值中的G--绿色
        矩阵第三行klmno值用来决定新的颜色值中的B--蓝色
        矩阵第四行pqrst值用来决定新的颜色值中的A--透明度
        矩阵中第五列ejot值分别用来决定每个分量重的offset，即偏移量

    像素点分析修改图像色值：（例：PixelsEffectActivity.java）

    最后通过：paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
            canvas.drawBitmap(bitmap, 0, 0, paint);
        实现效果。
---------------------------------------------------------------------------------------------
Matrix 变形矩阵
    Matrix matrix = new Matrix();
    常用方法：（例：MatrixActivity.java）
        matrix.setRotate();       //旋转变换
        matrix.setTranslate();    //平移变换
        matrix.setScale();        //缩放
        matrix.setSkew();         //错切
        matrix.pre()/.post();     //矩阵的前乘和后乘运算

    通过直接设置变形矩阵值方法：（例：MatrixValueSetActivity.java）
        |a b c||X|  |X1|
        |d e f||Y|= |Y1|
        |g h i||1|  |1 |
        X1 = aX + bY + c;
        ...
        a、e控制Scale--缩放
        b、d控制Skew --错切
        c、f控制Trans--平移
        a、b、d、e共同控制Rotate--旋转

    像素块分析修改图像图形：（例：PixelMatrixEffectActivity.java）

    最后通过：canvas.drawBitmap(bitmap, matrix, null);
            实现效果。
---------------------------------------------------------------------------------------------
Xfermode
    PorterDuff.Mode为枚举类,一共有16个枚举值:
        1.PorterDuff.Mode.CLEAR
          所绘制不会提交到画布上。
        2.PorterDuff.Mode.SRC
           显示上层绘制图片
        3.PorterDuff.Mode.DST
          显示下层绘制图片
        4.PorterDuff.Mode.SRC_OVER
          正常绘制显示，上下层绘制叠盖。
        5.PorterDuff.Mode.DST_OVER
          上下层都显示。下层居上显示。
        6.PorterDuff.Mode.SRC_IN
           取两层绘制交集。显示上层。
        7.PorterDuff.Mode.DST_IN
          取两层绘制交集。显示下层。
        8.PorterDuff.Mode.SRC_OUT
         取上层绘制非交集部分。
        9.PorterDuff.Mode.DST_OUT
         取下层绘制非交集部分。
        10.PorterDuff.Mode.SRC_ATOP
         取下层非交集部分与上层交集部分
        11.PorterDuff.Mode.DST_ATOP
         取上层非交集部分与下层交集部分
        12.PorterDuff.Mode.XOR
          异或：去除两图层交集部分
        13.PorterDuff.Mode.DARKEN
          取两图层全部区域，交集部分颜色加深
        14.PorterDuff.Mode.LIGHTEN
          取两图层全部，点亮交集部分颜色
        15.PorterDuff.Mode.MULTIPLY
          取两图层交集部分叠加后颜色
        16.PorterDuff.Mode.SCREEN
          取两图层全部区域，交集部分变为透明色

    使用方法：
        paint.setXfermode(PorterDuff.Mode);

---------------------------------------------------------------------------------------------
Path
    路径绘制，常用的方法比较简单:
    addArc(RectF oval, float startAngle, float sweepAngle)
    addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle)
    addCircle(float x, float y, float radius, Path.Direction dir)
    addOval(float left, float top, float right, float bottom, Path.Direction dir)
    addOval(RectF oval, Path.Direction dir)
    addRect(float left, float top, float right, float bottom, Path.Direction dir)
    addRect(RectF rect, Path.Direction dir)
    addRoundRect(float left, float top, float right, float bottom, float rx, float ry, Path.Direction dir)
    addRoundRect(float left, float top, float right, float bottom, float[] radii, Path.Direction dir)
    addRoundRect(RectF rect, float[] radii, Path.Direction dir)
    addRoundRect(RectF rect, float rx, float ry, Path.Direction dir)
    arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)
    arcTo(RectF oval, float startAngle, float sweepAngle)
    arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)

    computeBounds(RectF bounds, boolean exact);//计算Path所在区域并将结果写入bounds，如果整个Path只包含0或者1个点则返回(0, 0, 0, 0)。exact参数现在没意义了，随意传值。
    quadTo(float x1, float y1, float x2, float y2);//二阶贝塞尔曲线，只有一个控制点，(x1, y1)是控制点，(x2, y2)是结束点
    cubicTo(float x1, float y1, float x2, float y2, float x3, float y3);//三阶贝塞尔曲线，有两个控制点，(x1, y1)是第一控制点，(x2, y2)是第二控制点，(x3, y3)是结束点

PathMeasure这个类有必要了解下，参见博客：http://blog.csdn.net/u013831257/article/details/51565591
    PathMeasure(Path path, boolean forceClosed);//构造方法；一个构造空的PathMeasure对象，一个通过一个已存在的path构造PathMeasure对象，forceClosed决定是否close()这个path。
    setPath(Path path, boolean forceClosed);//配合PathMeasure()使用效果与PathMeasure(Path path, boolean forceClosed)一样。
    getLength();//测量Path的长度。
    isClosed();//判断轮廓路径是否是闭环的。
    nextContour();//移动到下一个轮廓，如果你的Path是由多个轮廓组成的话，那么就可以使用这个方法，有下一个轮廓存在就返回true。
    getPosTan(float distance, float[] pos, float[] tan);//传入一个距离distance(0<=distance<=getLength())，然后该方法会自动计算当前距离的坐标点和切线值存入pos与tan。
    getSegment(float startD, float stopD, Path dst, boolean startWithMoveTo);//传入一个开始和结束距离（0..getLength()），然后会返回介于这之间的Path值dst，最后那个参数决定开始距离是否从MoveTo坐标为参照物。

---------------------------------------------------------------------------------------------
Canvas
    常用绘图方法：
       drawPoint(x,y,paint);        //绘制点
       drawLine(startX,startY,endX,endY,paint); //绘制线
       drawLines(pts,paint);        //绘制多条线 float[] pts = {startX1,startY1,endX1,endY1, startX2,startY2,endX2,endY2}
       drawRect(left,top,right,bottom,paint);   //绘制矩形
       drawRoundRect(left,top,right,bottom,radiusX,radiusY,paint);  //绘制圆角矩形
       drawCircle(circleX,circleY,radius,paint);    //绘制圆
       drawArc(left,top,right,bottom,startAngle,sweepAngle,userCenter,paint);   //绘制弧形、扇形
       drawOval(left,top,right,bottom,paint);   //绘制椭圆
       drawText(text,startX,startY,paint);  //绘制文字
       drawTextOnPath(String text, Path path, float hOffset, float vOffset, Paint paint); //沿路径绘制文字
       drawPosText(text, new float[]{X1,Y1,X2,Y2,...Xn,Yn},paint);  //在指定位置绘制文本
       drawPath(path, paint);       //绘制路径  Path path = new Path(); path.moveTo(0,0); path.lineTo(50,50);
       drawBitmap();        //绘制图片（有很多重载方法）
       drawBitmapMesh(Bitmap bitmap, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[] colors, int colorOffset, Paint paint)
            //Mesh表示网格，这个方法可以制作网格变形效果，让图片像布一样被扭曲（!--yuyang这个方法的具体介绍可参考：http://blog.csdn.net/leehong2005/article/details/9127095）
            参数说明如下:
            bitmap　　　　　需要扭曲的源位图
            meshWidth 　　 控制在横向上把该源位图划成成多少格
            meshHeight 　　控制在纵向上把该源位图划成成多少格
            verts 　　　　　长度为(meshWidth + 1) * (meshHeight + 1) * 2的数组，它记录了扭曲后的位图各顶点位置
            vertOffset    控制verts数组中从第几个数组元素开始才对bitmap进行扭曲
          ZHU yuyang 这种效果请看Matrix.png的图片效果

    常用方法：
       save(); //特别注意：这里所有的方法被调运后除过调用save、restore处理可以恢复原样Canvas以外该操作是不可逆的！）
       restore();
       save(int saveFlags);
       restoreToCount(int saveCount);
       translate();
       scale();
       rotate();
       saveLayer();     //创建一个图层（详见：SaveLayerView.java）

       setBitmap(Bitmap bitmap)     //设置可变化的位图
       isHardwareAccelerated()      //判断当前Canvas是否开启了硬件加速

       clipPath(Path path); //依据路径和区域方式切割画布
       clipRect(RectF rect);  //以矩形方式切割画布
       clipRegion(Region region);  //以Region的区域方式切割画布



在访问UI的时候，ViewRootImpl会去检查当前是哪个线程访问的UI，如果不是主线程，那就会抛出如下异常：
    Only the original thread that created a view hierarchy can touch its views

当访问UI时，ViewRootImpl会调用checkThread方法去检查当前访问UI的线程是哪个，如果不是UI线程则会抛出异常，这是没问题的。
但是为什么一开始在MainActivity的onCreate方法中创建一个子线程访问UI，程序还是正常能跑起来呢？？
唯一的解释就是执行onCreate方法的那个时候ViewRootImpl还没创建，无法去检查当前线程。
那么就可以这样深入进去。寻找ViewRootImpl是在哪里，是什么时候创建的。

在ActivityThread中，我们找到handleResumeActivity方法,该方法内部调用了performResumeActivity方法（
这个方法看名字肯定是回调onResume方法的入口），这个方法内部又调用了performResume方法，接着performResume方法中
又调用了callActivityOnResume方法，最后的这个方法中调用Activity的onResume方法。

那么现在我们看回来handleResumeActivity方法，执行完performResumeActivity方法回调了onResume方法后，
会来到这一块代码：
    r.activity.mVisibleFromServer = true;
    mNumVisibleActivities++;
    if (r.activity.mVisibleFromClient) {
        r.activity.makeVisible();
    }
activity调用了makeVisible方法，这应该是让什么显示的吧，跟进去探探。
    void makeVisible() {
        if (!mWindowAdded) {
            ViewManager wm = getWindowManager();
            wm.addView(mDecor, getWindow().getAttributes());
            mWindowAdded = true;
        }
        mDecor.setVisibility(View.VISIBLE);
    }
往WindowManager中添加DecorView，那现在应该关注的就是WindowManager的addView方法了。而WindowManager是一个接口，
我们应该找到WindowManager的实现类才行，而WindowManager的实现类是WindowManagerImpl。
找到了WindowManagerImpl的addView方法，如下：
    @Override
    public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {
        applyDefaultToken(params);
        mGlobal.addView(view, params, mDisplay, mParentWindow);
    }
里面调用了WindowManagerGlobal的addView方法，那现在就锁定 WindowManagerGlobal的addView方法：
    public void addView(View view, ViewGroup.LayoutParams params,
            Display display, Window parentWindow) {
        //代码省略

        ViewRootImpl root;
        View panelParentView = null;

        //代码省略

            ZHU yuyang root = new ViewRootImpl(view.getContext(), display);

            view.setLayoutParams(wparams);

            mViews.add(view);
            mRoots.add(root);
            mParams.add(wparams);
        }

        // do this last because it fires off messages to start doing things
        try {
            root.setView(view, wparams, panelParentView);
        } catch (RuntimeException e) {
            // BadTokenException or InvalidDisplayException, clean up.
            synchronized (mLock) {
                final int index = findViewLocked(view, false);
                if (index >= 0) {
                    removeViewLocked(index, true);
                }
            }
            throw e;
        }
    }
终于击破，!--yuyang ViewRootImpl是在WindowManagerGlobal的addView方法中创建的。


!--yuyang 总结：ViewRootImpl的创建在onResume方法回调之后，而我们一开篇是在onCreate方法中创建了子线程并访问UI，
在那个时刻，ViewRootImpl是没有创建的，无法检测当前线程是否是UI线程，所以程序没有崩溃一样能跑起来，而之后修改了程序，
让线程休眠了200毫秒后，程序就崩了。很明显200毫秒后ViewRootImpl已经创建了，可以执行checkThread方法检查当前线程。

具体可参考博客：http://blog.csdn.net/xyh269/article/details/52728861

android系统的事件分发流程分为很多部分：
    Native层 –> ViewRootImpl层 –> DecorView层 –> Activity层 –> ViewGroup层 –> View层

在Native层android系统的事件流程：
1、Android系统是从底层驱动中获取各种原始的用户消息，包括按键、触摸屏、鼠标、滚迹球等用户事件消息。
2、在获取用户消息之后，android系统会对最原始的消息进行预处理，包括两个方面：一方面，将消息转化成系统可以处理的消息事件；
   另一方面，处理一些特殊的事件，比如HOME、MENU、POWER键等处理。
3、将处理后的消息事件分发到各个应用进程，这个需要使用IPC机制，Android系统使用管道来进行消息的传递。
4、Android系统使用InputManager类来管理消息，而具体的功能则是通过InputReaderThread和InputDispatcherThread
   两个线程来实现。其中InputReaderThread线程负责消息的读取，而InputDispatcherThread则负责消息的预处理和分发到
   各个应用进程中。
5、Activity系统在SystemServer进程中启动WindowManagerService服务，然后在WindowManagerService服务中启动
   InputManagerService服务。


   InputReaderThread是个抽象类，其具体实现在InputMethodManager$InputMethodManager子类
--> Native层经过事件的分发后最终会调用InputMethodManager.ImeInputEventSender的 onInputEventFinished 方法
--> onInputEventFinished方法最终会调用 InputMethodManager.finishedInputEvent() 方法
--> InputMethodManager.invokeFinishedInputEventCallback()
--> mCallback.onFinishedInputEvent(mToken, mHandled); 这里的mCallBack就是ViewRootImpl中的ImeInputStage类对象，而这里的ViewRootImpl对象就是我们的系统当前界面
--> ViewRootImpl$ImeInputStage.onFinishedInputEvent() ViewRootImpl中经过层层调用最终会到
--> ViewRootImpl$ViewPostImeInputStage.processPointerEvent() 方法
--> mView.dispatchPointerEvent(event) ViewRootImpl中的mView对象就是我们PhoneWindow中的mDecorView对象
--> PhoneWindow$DecorView.dispatchTouchEvent() 如果当前的PhoneWindow不是destroy状态，则执行cb.dispatchKeyEvent方法，
                                            而这里的callback对象就是我们的Activity对象，所以这里最终会执行到Activity的
                                            dispatchKeyEvent方法
--> Activity.dispatchTouchEvent()
  |--> Activity.onUserInteraction() !--yuyang 用户在触屏点击，按home，back，menu键都会触发此方法
  |--> getWindow().superDispatchTouchEvent() getWindow对象就是PhoneWindow
    |--> mDecor.superDispatchTouchEvent(event) mDecor就是Activity显示的ViewTree的根View，及DecorView（集成子FrameLayout）
       |--> FrameLayout.dispatchTouchEvent(event) 接下来就是传统的事件分发流程了


参考：http://blog.csdn.net/qq_23547831/article/details/51513771 及 下一篇
ZHU yuyang KeyEvent和MotionEvent是不同的，前者是按键事件，后者是触摸事件
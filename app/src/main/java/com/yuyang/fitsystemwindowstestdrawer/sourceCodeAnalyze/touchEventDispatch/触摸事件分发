View
 1、整个View的事件转发流程是：
    View.dispatchTouchEvent -> View.setOnTouchListener -> View.onTouchEvent -(DOWN时)-> View.setOnLongClickListener
                                                                            |
                                                                            |(UP时)-> View.performClick -> View.setOnClickListener

    在dispatchTouchEvent中会进行OnTouchListener的判断，如果OnTouchListener不为null且返回true，
    则表示事件被消费，onTouchEvent不会被执行；否则执行onTouchEvent。
    (如果在dispatchTouchEvent中的DOWN事件就返回了true，也就是onTouchEvent中没有执行DOWN事件，
     那么onTouchEvent中接下来的其他事件，例如：onClick、onLongClick事件都不会执行，因为在onTouchEvent的
     DOWN事件中会给 mPrivateFlags 设置一个 PREPRESSED或PRESSED 的标识，后续的MOVE、UP事件中如果该标识为空，
     就不会执行任何事件)

 2、dispatchTouchEvent (dispatchTouchEvent的返回值就是onTouchEvent的返回值)
    首先判断mOnTouchListener不为null，并且view是enable的状态，
    然后mOnTouchListener.onTouch(this, event)返回true，这三个条件如果都满足，直接return true，
    也就是下面的onTouchEvent(event）不会被执行了；

 3、onTouchEvent中的DOWN,MOVE,UP (onTouchEvent中DOWN事件的返回值决定了接下来的事件是否要传给此View)
    DOWN时：
        a、首先给mPrivateFlags设置标志为PREPRESSED，设置mHasPerformedLongPress=false；
           然后发出一个115ms后的mPendingCheckForTap；
        b、如果115ms内没有触发UP，则将mPrivateFlags标志置为PRESSED，清除PREPRESSED标志，
           同时发出一个延时为500-115ms的，检测长按任务消息；
        c、如果500ms内没有抬起则认为触发了长按事件（从DOWN触发开始算），则会触发LongClickListener:
           此时如果LongClickListener不为null，则会执行回调，同时如果LongClickListener.onClick返回true，
           才把mHasPerformedLongPress设置为true;否则mHasPerformedLongPress依然为false;
    MOVE时：
        主要就是检测用户是否划出控件，如果划出了：
        115ms内，直接移除mPendingCheckForTap；
        115ms外，则将标志中的PRESSED去除，同时移除长按的检查：removeLongPressCallback();
    UP时：
        a、如果mPrivateFlags包含PRESSED或者PREPRESSED则进入执行体，也就是无论是115ms内或者之后抬起都会进入执行体。
          （也就是为什么DOWN时一定要执行的原因，如果DOWN未执行mPrivateFlags为空，就不会进入UP的执行体）
        b、如果是500ms以后，那么有两种情况：
           i.设置了onLongClickListener，且onLongClickListener.onLongClick返回true，
             则mHasPerformedLongPress为true，点击事件OnClick事件无法触发；
           ii.没有设置onLongClickListener或者onLongClickListener.onLongClick返回false，
             则mHasPerformedLongPress为false，点击事件OnClick事件依然可以触发；
           如果mHasPerformedLongPress为false，移除长按事件的监听removeLongPressCallback，
           执行performClick()，在其中执行点击事件OnClick
        c、最后执行mUnsetPressedState.run()，将setPressed传递下去，
           可以在View中复写dispatchSetPressed方法接收然后将PRESSED标识去除；

ViewGroup
 1、大体的事件流程为：
    a、有子View消费事件：
        ViewGroup.dispatchTouchEvent -> ViewGroup.onInterceptTouchEvent -> View.dispatchTouchEvent -> View.onTouchEvent
    b、无子View消费事件：
        i、ViewGroup可点击：
         ViewGroup.dispatchTouchEvent -> ViewGroup.setOnTouchListener -> ViewGroup.onTouchEvent -(DOWN时)-> ViewGroup.setOnLongClickListener
                                                                                                |
                                                                                                |(UP时)-> ViewGroup.performClick -> ViewGroup.setOnClickListener
        ii、ViewGroup不可点击：
         ViewGroup.dispatchTouchEvent -> ViewGroup.setOnTouchListener -> ViewGroup.onTouchEvent

 2、dispatchTouchEvent中的DOWN,MOVE,UP
    DOWN时：
        a、判断disallowIntercept和onInterceptTouchEvent(ev)值
         disallowIntercept由requestDisallowInterceptTouchEvent()方法设置，用于判断当前ViewGroup是否不允许拦截；onInterceptTouchEvent(ev)是否拦截该事件
         如果当前不允许拦截，即disallowIntercept =true，或者，当前允许拦截但是不拦截，即disallowIntercept =false,但是onInterceptTouchEvent(ev)返回false
         则进入执行体，查找目标子View。
        b、如果子View的child.dispatchTouchEvent(ev)返回true，则为mMotionTarget=child;然后return true;
    MOVE时：
        把ACTION_DOWN时赋值的mMotionTarget，付给target ;
        if (!disallowIntercept && onInterceptTouchEvent(ev)) 当前允许拦截且拦截了，进入执行体(执行ViewGroup代码逻辑)
        else  把坐标系统转化为子View的坐标系统,直接return child.dispatchTouchEvent(ev);
    UP时：
        if (!disallowIntercept && onInterceptTouchEvent(ev)) 当前允许拦截且拦截了，进入执行体(执行ViewGroup代码逻辑)
        else  重置拦截标志位以及将DOWN赋值的mMotionTarget置为null，下一次DOWN时再赋值
              最后，修改坐标系统，然后调用child.dispatchTouchEvent(ev);

Activity
 在Activity的触摸屏事件派发中：
    1、首先会触发Activity的dispatchTouchEvent方法。
    2、dispatchTouchEvent方法中如果是ACTION_DOWN的情况下会接着触发onUserInteraction方法。
    3、接着在dispatchTouchEvent方法中会通过Activity的root View（id为content的FrameLayout），
      实质是ViewGroup，通过super.dispatchTouchEvent把touchEvent派发给各个activity的子view，
      也就是我们再Activity.onCreate方法中setContentView时设置的view。
    4、若Activity下面的子view拦截了touchEvent事件(返回true)则Activity.onTouchEvent方法就不会执行。
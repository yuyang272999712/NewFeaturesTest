Activity.startActivity()与Activity.startActivityForResult()
--> 都会调用到： startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) 方法
--> 实际上Activity的启动分为应用进程端的启动和SystemServer服务进程端的启动的，多个应用进程相互配合最终完成了
    Activity在系统中的启动的，而在应用进程端的启动实际的操作类就是Instrumentation来执行的：
    Instrumentation的 execStartActivity 方法
--> 这个方法中右回调用：ActivityManagerNative.getDefault().startActivity()
    （ActivityManagerNative是ActivityManagerService在应用进程的一个client，
    ActivityManagerNative.getDefault()方法会返回一个ActivityManagerProxy对象）
--> ActivityManagerProxy.startActivity() 通过Binder机制与ActivityManagerService进行通信

以上其实都是发生在应用进程中，下面开始调用的ActivityManagerService的执行时发生在SystemServer进程。
--> ActivityManagerService.startActivity() 啥也没干，直接调用下一个方法
--> ActivityManagerService.startActivityAsUser() 只是进行了一些关于userid的逻辑判断，直接进入下一个方法
--> ActivityStackSupervisor.startActivityMayWait() 执行了启动Activity的一些其他逻辑判断，在经过判断逻辑之后调用下一个方法
--> ActivityStackSupervisor.startActivityLocked() 主要构造了ActivityManagerService端的Activity对象
    ActivityRecord，并根据Activity的启动模式执行了相关逻辑，继续向下调用
--> ActivityStackSupervisor.startActivityUncheckedLocked() 执行了不同启动模式不同栈的处理，
    并最后调用了startActivityLocked方法
--> ActivityStack.startActivityLocked() 执行初始化了windowManager服务,然后继续向下调用了
--> ActivityStackSupervisor.resumeTopActivitiesLocked()
--> ActivityStack.resumeTopActivitiesLocked()
--> ActivityStack.resumeTopActivityInnerLocked()
--> ActivityStack.startPausingLocked() 这个方法作用就是让系统栈中的Activity执行onPause方法。
    这里执行了pre.app.thread.schedulePauseActivity方法，在ActivityThread中也定义了一个ApplicationThread
    的类，其集成了ApplicationThreadNative类，而ApplicationThreadNative类实现了IApplicationThread类，
    并且ApplicationThreadNative是Binder对象。不难看出这里的IApplication是一个Binder的client端
    而ActivityThread中的ApplicationThread是一个Binder对象的server端，所以通过这里的
    thread.schedulePauseActivity实际上调用的就是ApplicationThread的schedulePauseActivity方法。
    （ZHU yuyang 这里的ApplicationThread可以和ActivityManagerNative对于一下：
    通过ActivityManagerNative –> ActivityManagerService实现了应用进程与SystemServer进程的通讯
    通过ApplicationThread <– IApplicationThread实现了SystemServer进程与应用进程的通讯）

回到应用进程
--> ApplicationThread.schedulePauseActivity() 发送了PAUSE_ACTIVITY_FINISHING消息
--> ActivityThread.sendMessage()
--> ActivityThread.H.sendMessage();
--> ActivityThread.H.handleMessage()
--> ActivityThread.handlePauseActivity()
  |--> ActivityThread.performPauseActivity() 实现对栈顶Activity的onPause生命周期方法的回调
     |--> Instrumentation.callActivityOnPause()
     |--> Activity.performPause()
     |--> Activity.onPause() Activity生命周期中的第一个生命周期方法终于被我们找到了。。。。也就是说我们在启动
          一个Activity的时候最先被执行的是栈顶的Activity的onPause方法
  |--> ActivityManagerNative.getDefault().activityPaused(token)  应用进程告诉服务进程，栈顶Activity已经执行完成onPause方法了

回到服务进程
--> ActivityManagerService.activityPaused()
--> ActivityStack.activityPausedLocked()
--> ActivityStack.completePauseLocked()
--> ActivityStackSupervisor.resumeTopActivitiesLocked()
--> ActivityStack.resumeTopActivityLocked()
--> ActivityStack.resumeTopActivityInnerLocked()
--> ActivityStackSupervisor.startSpecificActivityLocked() 首先会判断一下需要启动的Activity
    所需要的应用进程是否已经启动，若启动的话，则直接调用realStartActivityLocked方法，
    否则调用startProcessLocked方法，用于启动应用进程。

这样关于启动Activity时的第三步骤就已经执行完成了，这里主要是实现了对栈顶Activity执行onPause方法，而这个方法首先判断
需要启动的Activity所属的进程是否已经启动，若已经启动则直接调用启动Activity的方法，否则将先启动Activity的应用进程，
然后在启动该Activity。

ZHU yuyang 以上内容都是调用startActivity()/startActivityForResult()的Activity的onPaused执行过程


假设应用进程未启动：
--> ActivityManagerService.startProcessLocked()
--> Process.start()
--> Process.startViaZygote()
--> Process.zygoteSendArgsAndGetResult() 其最终调用了Zygote并通过socket通信的方式让Zygote进程fork出了
    一个新的进程，并根据我们刚刚传递的”android.app.ActivityThread”字符串，反射出该对象并执行ActivityThread的
    main方法。这样我们所要启动的应用进程这时候其实已经启动了，但是还没有执行相应的初始化操作。
回到应用进程
--> ActivityThread.main() 应用进程被创建之后首先执行的是ActivityThread的main方法，
    所以我们将ActivityThread成为主线程。在main方法中主要执行了一些初始化的逻辑，并且创建了一个UI线程消息队列，
    这也就是为什么我们可以在主线程中随意的创建Handler而不会报错的原因
--> ActivityThread.attach()
回到服务进程
--> ActivityManagerNative.getDefault().attachApplication()
--> ActivityManagerService.attachApplication()
--> ActivityManagerService.attachApplicationLocked()
        // See if the top visible activity is waiting to run in this process...
        if (normalMode) {
            try {
                if (mStackSupervisor.attachApplicationLocked(app)) {
                    didSomething = true;
                }
            } catch (Exception e) {
                Slog.wtf(TAG, "Exception thrown launching activities in " + app, e);
                badApp = true;
            }
        }
    该方法执行了一系列的初始化操作，这样我们整个应用进程已经启动起来了。

启动Activity
--> ActivityStackSupervisor.attachApplicationLocked() 内部调用了realStartActivityLocked方法，
    通过名字可以知道这个方法应该就是用来启动Activity的
--> ActivityStackSupervisor.realStartActivityLocked()
    通过调用IApplicationThread的scheduleLaunchActivity方法，真正执行的是ActivityThread中的
    ApplicationThread的scheduleLaunchActivity
回到应用进程
--> ActivityThread.ApplicationThread.scheduleLaunchActivity()
--> ActivityThread.sendMessage()
--> ActivityThread.H.sendMessage()
--> ActivityThread.H.handleMessage()
--> ActivityThread.handleLaunchActivity()
  |--> ActivityThread.performLaunchActivity()
    |--> Instrumentation.callActivityOnCreate()
     --> Activity.performCreate()
     --> Activity.onCreate()
    |--> Activity.performStart()
     --> Instrumentation.callActivityOnStart()
     --> Activity.onStart()
  |--> ActivityThread.handleResumeActivity()
    |--> ActivityThread.performResumeActivity()
        --> Activity.performResume()
        --> Instrumentation.callActivityOnResume()
        --> Activity.onResume()
    |-->ActivityManagerNative.getDefault().activityResumed(token)
这时候我们的界面应该已经展示出来了，照理来说我们的Activity应该已经启动完成了，但是还没有,
有一个问题，Activity a 启动 Activity b 会触发那些生命周期方法？
你可能会回答？b的onCreate onStart方法，onResume方法，a的onPause方法和onStop方法，对了a的onStop方法还没回调呢


ZHU yuyang 以下内容是调用startActivity()/startActivityForResult()的Activity的onStop执行过程
handleResumeActivity方法，在方法体最后有这样的一代码：
    --> Looper.myQueue().addIdleHandler(new Idler())
    这段代码是异步消息机制相关的代码，我们可以看一下Idler对象的具体实现。
    Idler实现了IdleHandler接口，该接口会在MessageQueue闲置时方法queueIdle()被调用。
回到服务进程
--> ActivityManagerNative.getDefault().activityIdle()
--> ActivityManagerService.activityIdle()
--> ActivityStackSupervisor.activityIdleInternalLocked()
--> ActivityStack.stopActivityLocked()
回到应用进程
--> IApplicationThread.scheduleStopActivity()
--> ActivityThread.ApplicationThread.scheduleStopActivity()
--> ActivityThread.sendMessage()
--> ActivityThread.H.sendMessage()
--> ActivityThread.H.handleMessage()
--> ActivityThread.handleStopActivity()
--> ActivityThread.performStopActivityInner()
--> ActivityThread.callCallActivityOnSaveInstanceState()
  |--> Instrumentation.callActivityOnSaveInstanceState()
     --> Activity.performSaveInstanceState()
     --> Activity.onSaveInstanceState()
  |--> Activity.performStop()
     --> Instrumentation.callActivityOnStop()
     --> Activity.onStop()

总结：
    !--yuyang Activity的启动流程，一个典型的场景就是Activity a 启动了一个Activity b，他们的生命周期回调方法是：
  onPause(a) –> onCreate(b) –> onStart(b) –> onResume(b) –> onStop(a)
1、Activity的启动流程一般是通过调用startActivity或者是startActivityForResult来开始的
2、startActivity内部也是通过调用startActivityForResult来启动Activity，只不过传递的requestCode小于0
3、Activity的启动流程涉及到多个进程之间的通讯这里主要是ActivityThread与ActivityManagerService之间的通讯
4、ActivityThread向ActivityManagerService传递进程间消息通过ActivityManagerNative，
   ActivityManagerService向ActivityThread进程间传递消息通过IApplicationThread。
5、ActivityManagerService接收到应用进程创建Activity的请求之后会执行初始化操作，解析启动模式，
   保存请求信息等一系列操作。
6、ActivityManagerService保存完请求信息之后会将当前系统栈顶的Activity执行onPause操作，
   并且IApplication进程间通讯告诉应用程序继承执行当前栈顶的Activity的onPause方法；
7、ActivityThread接收到SystemServer的消息之后会统一交个自身定义的Handler对象处理分发；
8、ActivityThread执行完栈顶的Activity的onPause方法之后会通过ActivityManagerNative执行进程间通讯告诉
   ActivityManagerService，栈顶Activity已经执行完成onPause方法，继续执行后续操作；
9、ActivityManagerService会继续执行启动Activity的逻辑，这时候会判断需要启动的Activity所属的应用进程是否已经启动，
   若没有启动则首先会启动这个Activity的应用程序进程；
10、ActivityManagerService会通过socket与Zygote继承通讯，并告知Zygote进程fork出一个新的应用程序进程，
   然后执行ActivityThread的mani方法；
11、在ActivityThread.main方法中执行初始化操作，初始化主线程异步消息，然后通知ActivityManagerService执行进程初始化操作；
12、ActivityManagerService会在执行初始化操作的同时检测当前进程是否有需要创建的Activity对象，若有的话，
    则执行创建操作；
13、ActivityManagerService将执行创建Activity的通知告知ActivityThread，然后通过反射机制创建出Activity对象，
    并执行Activity的onCreate方法，onStart方法，onResume方法；
14、ActivityThread执行完成onResume方法之后告知ActivityManagerService onResume执行完成，
    开始执行栈顶Activity的onStop方法；
15、ActivityManagerService开始执行栈顶的onStop方法并告知ActivityThread；
16、ActivityThread执行真正的onStop方法

ZHU yuyang 卧槽，真他吗复杂，可参考博客：http://blog.csdn.net/qq_23547831/article/details/51224992


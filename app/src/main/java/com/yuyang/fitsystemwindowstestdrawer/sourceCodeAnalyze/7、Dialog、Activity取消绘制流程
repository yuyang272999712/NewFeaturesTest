Dialog的取消绘制流程与Activity的大致相似，这里以Dialog为例

--> Dialog.cancel() 若当前Dialog没有取消，并且设置了取消message，则调用
                    Message.obtain(mCancel).sendToTarget()回调取消OnCancelListener监听
 |--> Dialog.dismiss()
   |--> Dialog.dismissDialog()
        首先判断当前的mDecor是否为空，或者当前Dialog是否在显示，若为空或者没有在显示，则直接return掉，
     也就是说当前我们的dialog已经不再显示了，则我们不需要往下在执行。
        然后我们调用了mWindow.isDestroyed()方法，判断Window对象是否已经被销毁，若已经被销毁，
     则直接return，并打印错误日志。
        然后我们调用了mWindowManager.removeViewImmediate(mDecor)，这里的mDecor是我们Dialog窗口的根布局，]
     看这个方法的名字应该就是Dialog去除根布局的操作了，可以看一下这个方法的具体实现。
     |--> WindowManagerImpl.removeViewImmediate()
       |--> WindowManagerGlobal.removeView()
         |--> WindowManagerGlobal.removeViewLocked() 取了mDecor组件的ViewRootImpl，然后调用了其的die方法，通过这个方法实现Window组件的销毁流程。
           |--> ViewRootImpl.die()
             |--> ViewRootImpl.toDie() 真正执行window销毁工作的方法
                  首先调用了checkThread方法
                  又调用了dispatchDetachedFromWindow()方法，这个方法主要是销毁Window中的各中成员变量，临时变量等.
               |--> ViewRootImpl.dispatchDetachedFromWindow()
                     可以看到我们在方法中调用了mView.dispatchDetachedFromWindow方法，这个方法的作用就是将
                     mView从Window中detach出来
                 |--> View.dispatchDetachedFromWindow()
                       一次调用了：onDetachedFromWindow();（空方法，用户去实现）
                                onDetachedFromWindowInternal();
                                destroyDrawingCache();销毁View的缓存Drawing

Activity销毁流程：
    当我们调用activity的finish方法的时候回调用ActivityThread的 handleDestroyActivity 方法，
  来看一下这个方法的实现：
    private void handleDestroyActivity(IBinder token, boolean finishing,
                int configChanges, boolean getNonConfigInstance) {
        ...
        wm.removeViewImmediate(v);
        ...
    }
    这里调用了wm.removeViewImmediate方法，这个方法就是分析Dialog销毁绘制流程的起始方法


总结：
    1、窗口的取消绘制流程是相似的，包括Activity和Dialog等；
    2、通过调用WindowManager.removeViewImmediate方法，开始执行Window窗口的取消绘制流程；
    3、Window窗口的取消绘制流程，通过清空bitmap撤销draw的执行效果，通过置空View撤销measure和layout的执行效果；

参考：http://blog.csdn.net/qq_23547831/article/details/51303072
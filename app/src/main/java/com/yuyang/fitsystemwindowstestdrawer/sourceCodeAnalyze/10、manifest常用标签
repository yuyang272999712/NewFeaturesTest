Activity:
    android:excludeFromRecents="true" 使该Activity所在的任务栈不出现在系统最近任务中,只有在根Activity中才起作用
    android:noHistory="true" 使该Activity不会存留在任务栈中
    android:launchMode="singleTask" Activity启动模式
    android:taskAffinity="com.test.haha" 指定activity任务栈名称（字符串中必须包含分隔符"."）
    android:process=":remote" 指定activity进程（":"开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一进程中。不以":"开头的进程属于全局进程）
    android:allowTaskReparenting="true" 当把Activity的allowTaskReparenting属性设置成true时，
        Activity就拥有了一个转移所在任务的能力。具体点来说，就是一个Activity现在是处于某个任务当中的，
        但是它与另外一个任务具有相同的affinity值，那么当另外这个任务切换到前台的时候，该Activity就可以转移到
        现在的这个任务当中。
            那还是举一个形象点的例子吧，比如有一个天气预报程序，它有一个Activity是专门用于显示天气信息的，
        这个Activity和该天气预报程序的所有其它Activity具体相同的affinity值，并且还将
        allowTaskReparenting属性设置成true了。这个时候，你自己的应用程序通过Intent去启动了这个用于
        显示天气信息的Activity，那么此时这个Activity应该是和你的应用程序是在同一个任务当中的。
        但是当把天气预报程序切换到前台的时候，这个Activity又会被转移到天气预报程序的任务当中，并显示出来，
        因为它们拥有相同的affinity值，并且将allowTaskReparenting属性设置成了true。
    android:alwaysRetainTaskState="true" 如果将最底层的那个Activity的这个属性设置为true，那么上面所描述的默认行为就将不会发生，
        任务中所有的Activity即使过了很长一段时间之后仍然会被继续保留。
    android:clearTaskOnLaunch="true" 如果将最底层的那个Activity的这个属性设置为true，
        那么只要用户离开了当前任务，再次返回的时候就会将最底层Activity之上的所有其它Activity全部清除掉。
        简单来讲，就是一种和alwaysRetainTaskState完全相反的工作模式，它保证每次返回任务的时候都会是
        一种初始化状态，即使用户仅仅离开了很短的一段时间。
    android:finishOnTaskLaunch="true" 这个属性和clearTaskOnLaunch是比较类似的，不过它不是作用于整个
        任务上的，而是作用于单个Activity上。如果某个Activity将这个属性设置成true，那么用户一旦离开了当前任务，
        再次返回时这个Activity就会被清除掉。




小知识：
  1、禁止截屏
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);

  2、获取快照：
    // 获取需要截取快照的控件
    View view = findViewById(R.id.my_view);
    // 设置控件允许绘制缓存
    view.setDrawingCacheEnabled(true);
    // 获取控件的绘制缓存（快照）
    Bitmap bitmap = view.getDrawingCache();
    // 保存截取的快照
    bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);

  3、修改Activity的主题即可让下拉菜单显示在Toolbar下面，具体如下：（可参考actionbar项目下的NewToolbar.java的实现）
    <style name="AppTheme.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
        <item name="actionOverflowMenuStyle">@style/OverflowMenu</item>
    </style>
    <style name="OverflowMenu" parent="Base.Widget.AppCompat.PopupMenu.Overflow">
        <item name="overlapAnchor">false</item>
    </style>